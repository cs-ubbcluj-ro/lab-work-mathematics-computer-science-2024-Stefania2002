Part A: MiniLang Specification based on Pascal

1. Language Definition

1.1 Alphabet:

Upper (A-Z) and lower case letters (a-z) of the English alphabet

Underline character '_'

Decimal digits (0-9)

1.2 Lexic:

a. Special symbols:

Operators: + - * / := < <= = >=

Separators: [ ] { } : ; space

Reserved words: array char const do else if int of program read then var while write

b. Identifiers:

A sequence of letters and digits, starting with a letter

Rule: identifier ::= letter | letter{letter}{digit}

letter ::= "A" | "B" | ... | "Z"

digit ::= "0" | "1" | ... | "9"

c. Constants:

Integer:

Rule: noconst := +no | -no | no

no := digit{no}

Character:

Rule: character := 'letter' | 'digit'

String:

Rule: constchar := "string"

string := char{string}

char := letter | digit

2. Syntax:

a. Syntactical rules:

program ::= "VAR" decllist ";" cmpdstmt "."

decllist ::= declaration | declaration ";" decllist

declaration ::= IDENTIFIER ":" type

type1 ::= "BOOLEAN" | "CHAR" | "INTEGER" | "REAL"

arraydecl ::= "ARRAY" "[" nr "]" "OF" type1

type ::= type1 | arraydecl

cmpdstmt ::= "BEGIN" stmtlist "END"

stmtlist ::= stmt | stmt ";" stmtlist

stmt ::= simplstmt | structstmt

simplstmt ::= assignstmt | iostmt

assignstmt ::= IDENTIFIER ":=" expression

expression ::= expression "+" term | term

term ::= term "*" factor | factor

factor ::= "(" expression ")" | IDENTIFIER | CONSTANT

constant ::= INTEGER | CHARACTER | STRING

iostmt ::= "READ" | "WRITE" "(" IDENTIFIER ")"

structstmt ::= cmpdstmt | ifstmt | whilestmt

ifstmt ::= "IF" condition "THEN" stmt ["ELSE" stmt]

whilestmt ::= "WHILE" condition "DO" stmt

condition ::= expression RELATION expression

RELATION ::= "<" | "<=" | "=" | "<>" | ">=" | ">"


   
